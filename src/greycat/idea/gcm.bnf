/**
 * Copyright 2017 The GreyCat Authors.  All rights reserved.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
{
  parserClass="greycat.idea.parser.GCMParser"
  parserUtilClass="greycat.idea.parser.GCMParserUtil"
  stubParserClass="greycat.idea.parser.GeneratedParserUtilBase"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
  psiClassPrefix="GCM"
  psiImplClassSuffix="Impl"
  psiPackage="greycat.idea.psi"
  psiImplPackage="greycat.idea.psi.impl"

  elementTypeHolderClass="greycat.idea.psi.GCMTypes"
  elementTypeClass="greycat.idea.GCMElementType"
  tokenTypeClass="greycat.idea.GCMTokenType"

  psiImplUtilClass="greycat.idea.GCMUtil"

tokens=[
    CONST='const'
    TYPE='type'
    USING='using'
    INDEX = 'index'
    CLASS='class'
    ATT='att'
    EQUALS='='
    REF='ref'
    REL='rel'
    IMPORT='import'
    EXTENDS='extends'
    COMMA=','
    COLON=':'
    BODY_OPEN='{'
    BODY_CLOSE='}'
    POPEN='('
    PCLOSE=')'
    POINT='.'
    OPPOSITE_OF='oppositeOf'
    eof = '<<EOF>>'

    //comment='regexp://.*'
    //comment='regexp:(//.*|[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])'
    //comment='regexp:\/\*+((([^\*])+)|([\*]+(?!\/)))[*]+\/'

    line_comment="regexp://.*"
    block_comment="regexp:/\*([^]|\n)*\*/"

    NUMBER='regexp:[\-]?[0-9]+[.]?[0-9]*'
    //IDENT='regexp:[\*\.a-zA-Z0-9_\-]+'
    IDENT='regexp:[a-zA-Z_][a-zA-Z_0-9]*'
    ANNOT_ID='regexp:[@][a-zA-Z_0-9]*'
    string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
  ]
}

GREYCATMODEL ::= DECLARATION*;

DECLARATION ::= (CLASS_DECLARATION | CONST_DECLARATION | INDEX_DECLARATION | CUSTOM_TYPE_DECLARATION | IMPORT_DECLARATION | eof | newline | CRLF);
TYPE_DECLARATION ::= IDENT {mixin="greycat.idea.GCMNamedElementImpl" implements="greycat.idea.GCMNamedElement" methods=[setName getNameIdentifier]};

//IMPORT
IMPORT_DECLARATION ::= IMPORT STRING; //{pin=2 recoverWhile=rule_start}

//CONSTANT
CONST_DECLARATION ::= CONST IDENT COLON TYPE_DECLARATION (EQUALS CONST_VALUE_DECLARATION)?; //{pin=2 recoverWhile=rule_start}
CONST_VALUE_DECLARATION::= (TASK_VALUE_DECLARATION|VALUE_DECLARATION);
VALUE_DECLARATION ::= (IDENT | STRING | NUMBER | COMPLEX_VALUE_DECLARATION);
COMPLEX_VALUE_DECLARATION ::= POPEN COMPLEX_VALUE (COMMA COMPLEX_VALUE)* PCLOSE;
COMPLEX_VALUE ::= IDENT | STRING | NUMBER | NTUPLE_VALUE;
NTUPLE_VALUE ::= POPEN (IDENT | STRING | NUMBER) (COMMA (IDENT | STRING | NUMBER))* PCLOSE;

//TASK_VALUE_DECLARATION ::= (ACTION_DECLARATION POINT TASK_VALUE_DECLARATION | ACTION_DECLARATION )
TASK_VALUE_DECLARATION ::= ACTION_DECLARATION (POINT ACTION_DECLARATION)*;
ACTION_DECLARATION ::= IDENT ACTION_PARAMS?;
ACTION_PARAMS ::= POPEN ACTION_PARAMS_B? PCLOSE;
ACTION_PARAMS_B ::= ACTION_PARAM (COMMA ACTION_PARAM)*;
ACTION_PARAM ::= (STRING | NUMBER | SUB_TASK);
SUB_TASK ::= BODY_OPEN TASK_VALUE_DECLARATION BODY_CLOSE;
//CUSTOM TYPE
CUSTOM_TYPE_DECLARATION ::= TYPE IDENT BODY_OPEN (PROP)* BODY_CLOSE; //{pin=2 recoverWhile=rule_start}
//INDEX
INDEX_DECLARATION ::= INDEX IDENT COLON TYPE_DECLARATION USING INDEX_PARAMS; //{pin=2 recoverWhile=rule_start}
INDEX_PARAMS ::= IDENT (COMMA IDENT)*;
//CLASS DECLARATION
CLASS_DECLARATION ::= CLASS TYPE_DECLARATION PARENTS_DECLARATION? BODY_OPEN (PROP)* BODY_CLOSE; //{pin=2 recoverWhile=rule_start}
PARENTS_DECLARATION ::= EXTENDS TYPE_DECLARATION;
//PROPERTY
PROP ::= ANNOTATION | ATTRIBUTE_DECLARATION | RELATION_DECLARATION | (INDEX_DECLARATION (OPPOSITE_OF IDENT)?) | SUB_CONST_DECLARATION;
ATTRIBUTE_DECLARATION ::= ATT ATTRIBUTE_NAME COLON TYPE_DECLARATION (EQUALS ATTRIBUTE_DEFAULT)?;
ATTRIBUTE_NAME ::= IDENT;
ATTRIBUTE_DEFAULT ::= (TASK_VALUE_DECLARATION|VALUE_DECLARATION);
RELATION_DECLARATION ::= (TO_ONE_DECLARATION | TO_MANY_DECLARATION) (OPPOSITE_OF IDENT)?;
TO_ONE_DECLARATION ::= REF RELATION_NAME COLON TYPE_DECLARATION;
RELATION_NAME ::= IDENT;
TO_MANY_DECLARATION ::= REL RELATION_NAME COLON TYPE_DECLARATION;
SUB_CONST_DECLARATION ::= CONST IDENT COLON TYPE_DECLARATION (EQUALS CONST_VALUE_DECLARATION)?;
//ANNOTATION
ANNOTATION ::= ANNOT_ID (EQUALS VALUE_DECLARATION)?;
private rule_start ::= !(CLASS|INDEX|TYPE|CONST)